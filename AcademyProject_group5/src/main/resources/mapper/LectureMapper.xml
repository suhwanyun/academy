<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="academy.repo.LectureMapper">
	
	<select id="selectAllLecture" parameterType="paging" resultType="lecture">
		select *
		from (select rownum as rnum, sub.*
			 from (select distinct lecture_id, lecture_class, lecture_name, professor_name
				  from Lecture join LectureTime using (lecture_id, lecture_class)
				  <choose>
				  <when test="searchData != null and searchDataType == 'lecture'">
			      where	lecture_name like '%'||#{searchData}||'%' 
			      </when>
			      <when test="searchData != null and searchDataType == 'professor'">
			      where	professor_name like '%'||#{searchData}||'%' 
			      </when>
			      </choose>
				  order by lecture_id) sub)
		where rnum &gt;= #{startIdx} and rnum &lt;= #{endIdx}
	</select>
	
	<insert id="insertLectureAllpy" parameterType="lecture_apply">
		insert into LectureApply
		(lecture_id, user_id, lecture_class, is_president)
		values (#{lectureId}, #{userId}, #{lectureClass}, #{isPresident})
	</insert>
	
	<delete id="deleteLectureApply" parameterType="lecture_apply">
		delete from LectureApply
		where user_id = #{userId}
			and lecture_id = #{lectureId}
	</delete>
	
	<select id="selectLectureByUser" parameterType="String" resultType="lecture">
		select lecture_id, user_id, lecture_class, is_president, right_end_time
		from Lecture join LectureApply using (lecture_id, lecture_class)
		where user_id = #{userId}
	</select>
	
	<select id="selectLectureByClass" parameterType="lecture_time" resultType="lecture">
		select *
		from Lecture
		where lecture_id = #{lectureId} and lecture_class = #{lectureClass}
	</select>
	
	<select id="selectLectureTimeByUser" parameterType="String" resultType="lecture_time">
		select lecture_id, lecture_class, lecture_start, lecture_end, lecture_place, lecture_week
		from LectureTime join LectureApply using (lecture_id, lecture_class)
						 left join CancelLecture using (lecture_time_id)
		where user_id = #{user_id} 
		  and (is_temp_date &gt; sysdate or is_temp_date is null)
		  and (cancel_date &lt; sysdate or cancel_date is null)
	</select>
	
	<select id="selectLectureTimeByLecture" parameterType="lecture" resultType="lecture_time">
		select *
		from LectureTime
		where lecture_id = #{lectureId} and lecture_class = #{lectureClass}
	</select>
	
	<select id="selectAlreadyLectureTime" parameterType="user_lecture_time" resultType="user_lecture_time">
		select lecture_name, lecture_class, lecture_week, lecture_start, lecture_end
		from LectureTime join LectureApply using (lecture_id, lecture_class)
						 join Lecture using (lecture_id, lecture_class)
		where lecture_start &lt;= #{lectureEnd}
		  and lecture_end &gt;= #{lectureStart}
		  and lecture_week = #{lectureWeek}
		  and user_id = #{userId}
	</select>
	
	<select id="selectIsPresident" parameterType="lecture_apply" resultType="lecture_apply">
		select is_president, right_end_time
		from LectureApply
		where lecture_id = #{lectureId} 
			and lecture_class = #{lectureClass}
			and user_id = #{userId}
	</select>
	
	<select id="selectLectureIdList" resultType="int">
		select lecture_id
		from Lecture
	</select>
	
</mapper>